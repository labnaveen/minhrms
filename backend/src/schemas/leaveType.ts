import Joi from "joi";



export const LeaveTypeCreationSchema = Joi.object({
    leave_type_name: Joi.string().required(),
    negative_balance: Joi.boolean(),
    max_leave_allowed_in_negative_balance: Joi.when('negative_balance', {is: true, then: Joi.number().required(), otherwise: Joi.number()}),
    max_days_per_leave: Joi.number().required(),
    max_days_per_month: Joi.number().required(),
    allow_half_days: Joi.boolean(),
    leave_application_after: Joi.number().required(),
    custom_leave_application_date: Joi.when('leave_application_after', {is: 3, then: Joi.date().required(), otherwise: Joi.date().optional()}).optional(),
    application_on_holidays: Joi.boolean(),
    restriction_for_application: Joi.boolean().required(),
    limit_back_dated_application: Joi.when('restriction_for_application', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    notice_for_application: Joi.when('restriction_for_application', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    auto_approval: Joi.boolean().required(),
    auto_action_after: Joi.when('auto_approval', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    auto_approval_action: Joi.when('auto_approval', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    supporting_document_mandatory: Joi.boolean(),
    prorated_accrual_first_month: Joi.boolean(),
    prorated_rounding: Joi.when('prorated_accrural_first_month', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    prorated_rounding_factor: Joi.when('prorated_accrural_first_month', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    encashment_yearly: Joi.boolean(),
    max_leaves_for_encashment: Joi.when('encashment_yearly', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    carry_forward_yearly: Joi.boolean(),
    carry_forward_rounding: Joi.when('carry_forward_yearly', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    carry_forward_rounding_factor: Joi.when('carry_forward_yearly', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    intra_cycle_carry_forward: Joi.boolean(),
    prefix_postfix_weekly_off_sandwhich_rule: Joi.boolean(),
    prefix_postfix_holiday_sandwhich_rule: Joi.boolean(),
    inbetween_weekly_off_sandwhich_rule: Joi.boolean(),
    inbetween_holiday_sandwhich_rule: Joi.boolean()
})

export const LeaveTypeUpdationSchema = Joi.object({
    leave_type_name: Joi.string().optional(),
    negative_balance: Joi.boolean(),
    max_leave_allowed_in_negative_balance: Joi.when('negative_balance', {is: true, then: Joi.number().required(), otherwise: Joi.number()}),
    max_days_per_leave: Joi.number().optional(),
    max_days_per_month: Joi.number().optional(),
    allow_half_days: Joi.boolean(),
    leave_application_after: Joi.number().optional(),
    custom_leave_application_date: Joi.when('leave_application_after', {is: 3, then: Joi.date().required(), otherwise: Joi.date().optional()}).optional(),
    application_on_holidays: Joi.boolean(),
    restriction_for_application: Joi.boolean().optional(),
    limit_back_dated_application: Joi.when('restriction_for_application', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    notice_for_application: Joi.when('restriction_for_application', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    auto_approval: Joi.boolean().optional(),
    auto_action_after: Joi.when('auto_approval', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    auto_approval_action: Joi.when('auto_approval', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    supporting_document_mandatory: Joi.boolean(),
    prorated_accrual_first_month: Joi.boolean(),
    prorated_rounding: Joi.when('prorated_accrural_first_month', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    prorated_rounding_factor: Joi.when('prorated_accrural_first_month', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    encashment_yearly: Joi.boolean(),
    max_leaves_for_encashment: Joi.when('encashment_yearly', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    carry_forward_yearly: Joi.boolean(),
    carry_forward_rounding: Joi.when('carry_forward_yearly', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    carry_forward_rounding_factor: Joi.when('carry_forward_yearly', {is: true, then: Joi.number().required(), otherwise: Joi.number().optional()}).optional(),
    intra_cycle_carry_forward: Joi.boolean(),
    prefix_postfix_weekly_off_sandwhich_rule: Joi.boolean(),
    prefix_postfix_holiday_sandwhich_rule: Joi.boolean(),
    inbetween_weekly_off_sandwhich_rule: Joi.boolean(),
    inbetween_holiday_sandwhich_rule: Joi.boolean()
})