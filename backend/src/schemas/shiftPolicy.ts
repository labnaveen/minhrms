import Joi from "joi";

export const ShiftPolicyCreation = Joi.object({
    shift_name: Joi.string().required(),
    shift_description: Joi.string().optional(),
    notes_for_punch: Joi.boolean().optional(),
    allow_single_punch: Joi.boolean().optional(),
    shift_type_id: Joi.number(),
    shift_start_time: Joi.when('shift_type_id', {is: 1, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    shift_end_time: Joi.when('shift_type_id', {is: 1, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    pre_shift_duration: Joi.when('shift_type_id', {is: 1, then: Joi.number(), otherwise: Joi.optional()}).optional(),
    post_shift_duration: Joi.when('shift_type_id', {is: 1, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    consider_breaks: Joi.boolean(),
    break_duration: Joi.when('consider_breaks', { is: true, then: Joi.number().required(), otherwise: Joi.optional() }).optional(),
    break_start_time: Joi.when('consider_breaks', {is: true, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    break_end_time: Joi.when('consider_breaks', {is: true, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    enable_grace: Joi.boolean(),
    grace_duration_allowed: Joi.when('enable_grace', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    number_of_days_grace_allowed: Joi.when('enable_grace', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    status_grace_exceeded: Joi.when('enable_grace', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    enable_grace_recurring: Joi.when('enable_grace', {is: true, then: Joi.boolean().optional(), otherwise: Joi.optional()}).optional(),
    enable_flex: Joi.when('shift_type_id', {is: 1, then: Joi.boolean(), otherwise: Joi.optional()}).optional(),
    flex_start_time: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    flexi_duration_allowed: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    number_of_days_flexi_allowed: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    status_flexi_exceeded: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    status_punch_in_time_exceeded: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    enable_flex_recurring: Joi.when('enable_flex', {is: true, then: Joi.boolean(), otherwise: Joi.boolean()}).optional(),
    base_working_hours: Joi.when('shift_type_id', {is: 2, then: Joi.number().required(), otherwise: Joi.number().optional()})
})

export const ShiftPolicyUpdationSchema = Joi.object({
    shift_name: Joi.string().required(),
    shift_description: Joi.string().optional(),
    notes_for_punch: Joi.boolean().optional(),
    allow_single_punch: Joi.boolean().optional(),
    shift_type_id: Joi.number(),
    shift_start_time: Joi.when('shift_type_id', {is: 1, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    shift_end_time: Joi.when('shift_type_id', {is: 1, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    pre_shift_duration: Joi.when('shift_type_id', {is: 1, then: Joi.number(), otherwise: Joi.optional()}).optional(),
    post_shift_duration: Joi.when('shift_type_id', {is: 1, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    consider_breaks: Joi.boolean(),
    break_duration: Joi.when('consider_breaks', { is: true, then: Joi.number().required(), otherwise: Joi.optional() }).optional(),
    break_start_time: Joi.when('consider_breaks', {is: true, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    break_end_time: Joi.when('consider_breaks', {is: true, then: Joi.string().required(), otherwise: Joi.optional()}).optional(),
    enable_grace: Joi.boolean(),
    grace_duration_allowed: Joi.when('enable_grace', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    number_of_days_grace_allowed: Joi.when('enable_grace', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    status_grace_exceeded: Joi.when('enable_grace', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    enable_grace_recurring: Joi.when('enable_grace', {is: true, then: Joi.boolean().optional(), otherwise: Joi.optional()}).optional(),
    enable_flex: Joi.when('shift_type_id', {is: 1, then: Joi.boolean(), otherwise: Joi.optional()}).optional(),
    flex_start_time: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    flexi_duration_allowed: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    number_of_days_flexi_allowed: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    status_flexi_exceeded: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    status_punch_in_time_exceeded: Joi.when('enable_flex', {is: true, then: Joi.number().required(), otherwise: Joi.optional()}).optional(),
    enable_flex_recurring: Joi.when('enable_flex', {is: true, then: Joi.boolean(), otherwise: Joi.boolean()}).optional(),
    base_working_hours: Joi.when('shift_type_id', {is: 2, then: Joi.number().required(), otherwise: Joi.number().optional()})
})